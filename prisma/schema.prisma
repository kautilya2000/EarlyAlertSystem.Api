// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Student {
  id               Int            @id @default(autoincrement())
  ksuId            String         @unique
  firstName        String
  lastName         String
  email            String         @unique
  phoneNumber      String?
  departmentId     Int
  major            String?
  gpa              Float?
  cohort           String?
  academicStanding String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  isDeleted        Boolean        @default(false)
  Grade            Grade[]
  SupportEvent     SupportEvent[]
  Alert            Alert[]
  Department       Department     @relation(fields: [departmentId], references: [id])
}

model Instructor {
  id         Int      @id @default(autoincrement())
  firstName  String
  middleName String?
  lastName   String
  email      String   @unique
  Course     Course[]
}

model Department {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)
  Student   Student[]
}

model Course {
  id                Int          @id @default(autoincrement())
  courseName        String
  courseNumber      String
  courseSubjectCode String
  creditHours       Int
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  isDeleted         Boolean      @default(false)
  Grade             Grade[]
  Alert             Alert[]
  Instructor        Instructor[]
}

model Grade {
  id                Int      @id @default(autoincrement())
  gradeValue        String
  student           Student  @relation(fields: [studentId], references: [id])
  studentId         Int
  course            Course   @relation(fields: [courseId], references: [id])
  courseId          Int
  semesterCode      String
  crn               String
  instructionMethod String
  repeatIndicator   String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  isDeleted         Boolean  @default(false)
}

model Unit {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)
  Support   Support[]
}

model Support {
  id           Int            @id @default(autoincrement())
  supportId    Int            @unique
  supportName  String
  supportEmail String
  unitId       Int
  Unit         Unit           @relation(fields: [unitId], references: [id])
  type         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isDeleted    Boolean        @default(false)
  SupportEvent SupportEvent[]
  Alert        Alert[]
}

model SupportEvent {
  id        Int      @id @default(autoincrement())
  Support   Support  @relation(fields: [supportId], references: [id])
  supportId Int
  Student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
}

model Alert {
  id        Int       @id @default(autoincrement())
  Student   Student   @relation(fields: [studentId], references: [id])
  studentId Int
  Course    Course    @relation(fields: [courseId], references: [id])
  courseId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)
  Support   Support[]
}

model RiskStudentDetails {
  id                Int                @id @default(autoincrement())
  facultyName       String
  facultyEmail      String
  courseNumber      String
  courseCrn         String
  studentName       String
  studentId         String?
  studentNetId      String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  isDeleted         Boolean            @default(false)
  FactorsConcerned  FactorsConcerned[]
  notes             String?
  isGraduateStudent Boolean
  graduateProgram   String?
  sendEmail         Boolean?
}

model FactorsConcerned {
  id                   Int                 @id @default(autoincrement())
  factorConcerned      String
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  isDeleted            Boolean             @default(false)
  riskStudentDetailsId Int?
  RiskStudentDetails   RiskStudentDetails? @relation(fields: [riskStudentDetailsId], references: [id])

  @@index([riskStudentDetailsId])
}
